PYTHON
======


Basic questions:
================

Расскажите мне про язык Python?
--------------------------------
- разработчик Гвидо Ван Россум
- высокоуровневый язык
- подерживает как фукнциональное программирование так и ооп
- интерпретируемый(не требует компиляции)
- язык, с динамической дипизацией данных
- встроенная поддержка unicode в строках
- развитая инфраструктура
- Все объект(все включая фукнции, классы могут быть присвоены переменной,
возвращаться фукнцией, и передаваться в фукнцию)
- кроссплатформенность


Что такое PEP8?
----------------
PEP8 можно определить, как документ, описывающий общепринятый стиль
написания кода на языке Python. Python Enhanced Proposal (PEP) - переводится,
как заявки по улучшению языка Python.

- отступ 4 пробела
- максимальная длина строки 79 символов
- фукнции верхнего уровня и определение классов отделяется 2 пустыми строками
- для каждого импорта отдельная строка
- импорты из стандартной библиотеки, импорты сторонних библиотек, импорты модулей текущего проекта
- имена фукнций через нижнее подчеркивание, классов Кэмэл кейс


Сильные и слабые стороны?
------------------------
Сильные стороны:
- приятный синтаксис
-

Слабые стороны:
- главная проблема
это скорость(динамическая типизация и автоматическое управление памятью)

Идиомы языка
------------
- генараторы, итераторы

Garbage collector
-----------------
Python отслеживает количество ссылок на каждый объект в памяти.
Если счетчик ссылок равен нулю, то соответствующий объект удаляется из памяти,
освобождённая память может быть использована повторно.
Иногда случаются так называемые «ссылочные циклы».
Сборщик мусора периодически ищет их и удаляет. Например, если есть два объекта
О1 и О2 такие, что О1.х == О2 и О2.х == О1. Если О1 и О2 не ссылается
на что-нибудь другое, то их недолжно быть. Но при этом каждый
из них имеет счетчик ссылок равный 1.
Для ускорения сбора мусора используются некоторые эвристики.
Например, недавно созданные объекты, скорее всего, будут мертвы. С
вежесозданным объектам, сборщик мусора присваивает поколение.
Каждый объект получает одно поколение, младшие поколения рассматриваются в первую очередь.


Data Types:
============

Какие стандратные типы данных?
-------------------------------
bool, int, string, list, tuple, set, dictionary,

Как преобразовать один тип в другой?
-------------------------------------
использовать фукнции дкоторые имеются в языке для каждого типа:
bool(), int(), float(), str(), list(), tuple(), set(), dict()

Что такое mutable immutable типы данных?
----------------------------------------
mutable - может быть изменен после создания(списки, словари, сеты)
imutable - не может быть изменен после создания(булево, числа, строки, кортежи)


Числа:


Строки:
Какие виды строк в языке?
--------------------------
обычные строковые литералы обозначаются ""''
r'' - сырые строки.

Способы форматирования строк
-----------------------------
при помощи знака %
при помощи фукнции format()
при помощи f'{}' - f строки
при помощи Template


Списки:
Для чего используется отрицательный индекс?
-------------------------------------------
для индексации с последнего элемента


В чем разница между кортежем и массивом?
-----------------------------------------
кортеж является immutable типом данных а список изменяемым

Сеты:
Что такое сет?
--------------
Контейнер для последовательности уникальных неупорядоченных значений

- нельзя создать пустой сет при помощи {}

Каковы его отличительные черты?
-------------------------------


Словари:




Functions:
==========

Стандартные фукнции и что они делают
-------------------------------------
math
abs()
divmod()

enumirate()
range()
reversed()
join()

Что используется в языке для копирования?
-----------------------------------------

Чем дип копи отличается от обычного?
------------------------------------

Для чего используется join()?
------------------------------

Функция zip в python?
---------------------

Lambda function
----------------

Оператор yield
---------------

Разница между range() b xrange()
--------------------------------


Остальные темы
=================
Генераторы, Итераторы
---------------------

Анонимные функции
-----------------

Manager contexta(что такое, где применяются, чем можно заменить)
----------------------------------------------------------------

Что такое тернарный оператор?
------------------------------

Обработка ошибок:
-----------------

Определение сложности:
-----------------------
https://docs.python.org/2/library/profile.html

Работа с файлами
-----------------

Хеширование:
------------


OOP
====

Что такое магические методы?
----------------------------

Как работает наследование в Python
----------------------------------

classmethod staticmethod
------------------------

property
----------

Декораторы
----------

Множественное наследование(это зло)
-----------------------------------

New style/old style class
-------------------------

MRO
-----

__slot__
---------

дескриптор протоколов
---------------------

meta Классы
-----------

Использование super()
---------------------


Стандартные библиотеки
=======================

Какие стандартные библиотеки Питона вы использовали
---------------------------------------------------

У нас есть импортированный модуль foo, как узнать физический путь файла, откуда он импортирован?
------------------------------------------------------------------------------------------------

Как посмотреть список каталогов, в которых Python ищет модули?
---------------------------------------------------------------

Что означает и для чего используется конструкция __name__ == '__main__':
------------------------------------------------------------------------
