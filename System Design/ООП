Объектно-ориентированное программрование
-----------------------------------------

Методология программирования предлагающая представить программу как совокупность
объектов каждый из которых является экземпляром класса.


Плюсы ООП:
- классы позволяют разбить программу на более мелкие и понятные части,
что улучшает конструирование и понимание программы(естественная декомпозиция)
- данные и методы образует сущность и не размазываются по программе
(улучшает читаемость, наглядность, поддержку)
- многоразовое использование компонентов
- возможность простой модификации(при грамотном проектировании)

Минусы ООП:
- данные которые задействованы при одном вызове могут быть сильно разбросаны
по всей программе
- сложность в освоении
- увелечение времени выполнения
- увелечение кода
- большие начальные требования к программе


Терминология:
Класс - универсальный тип данных, который состоит из тематически единного набора
полей и аттрибутов, общих для всех обхектов этого класса.

Объект - сущность, имеющая набор данных и связанных с этими данными методов.
Объект всегда экземпляр класса.


Принципы ООП:
Абстакция - выделение значимой информаии и исключение из расмотрения
незначимой. Это набор наиболее значимых характеристик объектов.
Абстрактный класс - базовый класс, который не подразумевает создание экземпляров.
Абстрактный класс может содержать абсрактные методы и свойства.
Абстрактный метод - метод класса, для которого отстутствует реализация.
Не путать абстрактный метод с виртуальным.
Виртуальный метод это тот, который переопределен в классе-наследнике. Но он может
содеражать в себе реализацию. Таким образом любой абстрактный метод является
виртуальным, но не любой виртуальный метод является абстрактным.
Инкапсулируй в отдельный объект то, что может измениться

Наследование - это свойство программы, позволяющее описать новый класс на основе
другого уже имеющегося. Клаасс от которого производится наследование называется
базовым или родительским. Новый - наследник, дочерний, ребенок.

Инкапсуляция- свойство программы, которое подразумивает реализацию одну
из следующих концепций:
- целостность данных, то есть объекдинение данных и методов
- сокрытие данных, то есть разграничить доступ к некоторым компонентам класса.
Python полностью реализует целостность данных, но разделяет понятие сокрытия и
нкапсуляции. Сокрытие в Python это просто договоренность между программистами.

Полифиморфизм - один интерфейс - много реализаций. Свойство программы, которое
позволяет использовать одно и то же имя для решения схожих, но технически
разных задач.


SOLID
-----
Акроним, означающий 5 основных принципов объектно-ориентированного языка.
Использование этих принципов позволяет существенно повысить вероятность того,
что ситема будет спроектировано должным образом, то есть будет долговечна,
устойчива к ошибка, масштабируема и ее легко будет поддерживать.

Признаки плохого проекта:
- закрепощенность: система плохо поддается изменениям. Изменения в одном месте
требует изменения в многих других частяъ системы.
- неустойчивость: в результате изменений система разрушается в тех местах,
которые не имеют непосредственного отношения к компоненту
- неподвижность: трудно разделить систему на компоненты для повторного использования
- вязкость: используя систему легче сделать ошибку, чем правильное действие
- неоправданная сложность: наличие инфрастурктуры, не несущей выгоды
- неопределенность: систему сложно читаемость

Избавиться от следующих проблем позволяют принципы SOLID:
Single Responsibility Principle
Принцип единой ответственности
-------------------------------
Каждая програмная сущность выполняет только одну задачу, и выполняет ее хорошо.
Каждый метод класса должен помогать выполнению этой задачи.

При проектировании нужно задавать себе вопросы:
- могу ли я сделать эту фукнцию меньше?
- как сделать этот класс меньше?

Open Closed Principle
Принцип открытости/закрытости
-----------------------------
Програмные сущности должны быть открыты для расширения и закрыты для модификации.
То есть программа должна иметь возможность расшириться не изменяя при этот
уже существующий код классов

Этот принцип реализуется при помощи наследования об абстрактных базовых классов.
Существующий интерфейс должен быть закрыт для модификаций,
а новые реализации должны, по меньшей мере, реализовывать этот интерфейс.

Liskov Substitution Principle
Принцип подстановки Барбары Лисков
----------------------------------

Фукнции которые используют базовый тип, должны иметь возможность использовать
подтипы базового типа, не зная об этом.
То есть программа должна фукнционировать без ошибок при замене базового класса
на его подклассы.
Поведение наследуемых классов не должно противоречить поведенияю базового класса.
подкласс не должен требовать от вызывающего кода больше, чем базовый класс,
и не должен предоставлять вызывающему коду меньше, чем базовый класс

Interface Segregation Principle
Принцип разделения интерфеса
-------------------------------

Много специализированных интерфейсов лучше чем один общий.
Програмные сущности не должны зависеть от методов, которые они не используют.

Dependency Inversion Principle
Принцип инверсии зависимостей
-------------------------------

Модули верхних уровней не должны зависеть от модулей нижних уровней.
Оба типа модулей должны зависеть от абстракций.
Абстракции не должны зависеть от деталей.
Детали должны зависеть от абстракций.
