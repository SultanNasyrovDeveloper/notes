Prototype
----------

Описание:
Задает вид создаваемых объектов с помощью экземпляра прототипа
и создает новые путем его копирования.


Когда использовать:
- система не должна зависеть от того, как в ней создаются, компонуются
и представляются продукты:
- инстранцируемые классы определяются во время выполнения,
например с помощью загрузки
- для того чтобы избежать использования иерархий классов или фабрик,
параллельных иерархии классов продуктов.
- экземпляры класса могут находится в одном из не очень
большого числа различных состояний. Может оказаться удобнее установить
соотвествующее число прототипов и клонировать их,
а не инстациировать класс вручную.


Участники:
1) Прототип
объявляет интерфейс для клонирования самого себя

2) Конкретный прототип
реализует операцию клонирования себя

3) Клиент
создает новый объект обращаясь к прототипу с запросом клонировать себя

Отношения:
клиент обращается к прототипу чтобы тот создал копию себя


Результаты:

import copy


class Prototype(object):
    def __init__(self):
        self._objects = {}

    def register(self, name, obj):
        self._objects[name] = obj

    def unregister(self, name):
        del self._objects[name]

    def clone(self, name, attrs):
        obj = copy.deepcopy(self._objects[name])
        obj.__dict__.update(attrs)
        return obj


class Bird(object):
    """Птица"""
    pass


prototype = Prototype()
prototype.register('bird', Bird())

owl = prototype.clone('bird', {'name': 'Owl'})
print type(owl), owl.name  # <class '__main__.Bird'> Owl

duck = prototype.clone('bird', {'name': 'Duck'})
print type(duck), duck.name  # <class '__main__.Bird'> Duck
