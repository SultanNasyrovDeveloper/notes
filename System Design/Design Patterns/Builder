Builder
--------------

Описание:
Отделяет конструирование сложного объекта от его представления,
так что в результате одного и того же процесса конструирования может
получаться разные представления.


Когда использовать:
- алгоритм создания сложного объекта не должен зависеть от того, из каких
частей состоит объект и как они стыкуются между собой
- процесс конструирования долже обеспечиваться различные представления
конструируемого объекта


Участники:
1) Строитель
- задает абстактный интерфейс для создания частей объекта Продукт

2) Конкретный Строитель
- конструирует и собирает части посредством реализации интерфейса Строитель
- определяет создаваемое представление и следит за ним
- предоставлляет интерфейс для доступа к продукту

3) Распорядитель
- конструирует объект используя интерфейс Строителья

4) Продукт
- сложный конструируемый объект. Конкретный Строитель определяет процесс сборки
- включает классы которые определяют составные части

Отношения:
- клиент создает объект распорядитель и конфигурирует его нужным объектом строителем
- распорядитель уведомляет строителя о том,
что нужно посторить очередную составную часть продукта
- строитель обрабытывает запросы распорядителя и добаляет новые части
- клиент забирает продукт у строителя


class Builder(object):
    """
    Строитель
    абстрактный класс, который оперделяет интрефейс для создания частей продукты
    """
    def build_body(self):
        """Абстрактный интерфейс для создания части продукты"""
        raise NotImplementedError()

    def build_lamp(self):
        """Абстрактный интерфейс для создания части продукты"""
        raise NotImplementedError()

    def build_battery(self):
        """Абстрактный интерфейс для создания части продукты"""
        raise NotImplementedError()

    def create_flashlight(self):
        """
        Распорядитель
        Интрефейс для конструирования продукта
        """
        raise NotImplementedError()


class Lamp(object):
    """
    Лампочка - класс часть продукта Фонарик
    """
    pass


class Body(object):
    """
    Корпус - класс часть продукта Фонарик
    """
    pass


class Battery(object):
    """
    Батарея - класс часть продукта Фонарик
    """
    pass


class Flashlight(object):
    """
    Карманный фонарик - сложный продукт состоящий из многих составных частей
    """
    def __init__(self, body, lamp, battery):
        self._shine = False  # излучать свет
        self._body = body
        self._lamp = lamp
        self._battery = battery

    def on(self):
        self._shine = True

    def off(self):
        self._shine = False

    def __str__(self):
        shine = 'on' if self._shine else 'off'
        return 'Flashlight [%s]' % shine



class FlashlightBuilder(Builder):
    """
    Конкретный строитель
    реализует интерфейс абстрактного класса для создания и конфигурации
    сложного объекты продукт
    """
    def build_body(self):
        """Создание части сложного объекта"""
        return Body()

    def build_battery(self):
        """Создание части сложного объекта"""
        return Battery()

    def build_lamp(self):
        """Создание части сложного объекта"""
        return Lamp()

    def create_flashlight(self):
        """
        Распорядитель
        Конфигурация сложного объекта
        возвращет продукт
        """
        body = self.build_body()
        lamp = self.build_lamp()
        battery = self.build_battery()
        return Flashlight(body, lamp, battery)


builder = FlashlightBuilder()
flashlight = builder.create_flashlight()
flashlight.on()
print flashlight  # Flashlight [on]
