Composite
----------

Описание:
Компонует объект в древовидные структуры.
Позволяет клиенту обращаться одинаково к отдельным объектам или группе.


Когда использовать:
- нужно предоставить древовидную иерархию
- объединить группы примитивных и составных объектов
со схожим интерфейсом и управлять ими


Участники:
1) Компонент(абстрактный компонент)
- объявляет интерфейс для компонуемых объектов
- предоствляет реализацию операций общих для всех классов
- объявляет интерфейс для доступа к потомкам и управления ими
- определяет интерфейс для доступа к родителю(необязательно)

2) Лист
- узел композиции не имеющий потомков
- опеределяет поведение примитивных объектов

3) Композит
- определяет поведение объектов у которых есть потомки
- хранит компоненты потомки
- реализует относящиеся к управлению потомками операции
- имеет интерфейс для добавления и удаления объектов


Отношения:
Клиенты используют интерфейс класса Компонент для взаимодействия с объектами
Если получать запроса Лист, то он обрабатывает запрос
Если Композит то перенаправляет запрос потомкам

Результаты:
- определяет иерархию классов
- упрощает архитектуру
- упрощает добавление новых видов компонентов



Пример:
from abc import ABCMeta, abstractmethod

class Unit(metaclass=ABCMeta):
    """
    Абстрактный компонент
    """

    @abstractmethod
    def print(self) -> None:
        """
        Объявляет общий интрефейс для объектов
        """
        pass


class Archer(Unit):
    """
    Лучник - лист(не имеет потомков)
    """

    def print(self) -> None:
        print('лучник', end=' ')


class Knight(Unit):
    """
    Рыцарь - лист(не имеет потомков)
    """

    def print(self) -> None:
        print('рыцарь', end=' ')


class Swordsman(Unit):
    """
    Мечник - лист(не имеет потомков)
    """

    def print(self) -> None:
        print('мечник', end=' ')


class Squad(Unit):
    """
    Компоновщик - отряд, состоящий более чем из одного человека. Также
    может включать в себя другие отряды-компоновщики.
    """

    def __init__(self):
        self._units = []

    def print(self) -> None:
        """Позволяет одинаково обращаться к единичному или составному объекту"""
        print("Отряд {} (".format(self.__hash__()), end=' ')
        for u in self._units:
            u.print()
        print(')')

    def add(self, unit: Unit) -> None:
        """
        Добавление нового отряда

        :param unit: отряд (может быть как базовым, так и компоновщиком)
        """
        self._units.append(unit)
        unit.print()
        print('присоединился к отряду {}'.format(self.__hash__()))
        print()

    def remove(self, unit: Unit) -> None:
        """
        Удаление отряда из текущего компоновщика

        :param unit: объект отряда
        """
        for u in self._units:
            if u == unit:
                self._units.remove(u)
                u.print()
                print('покинул отряд {}'.format(self.__hash__()))
                print()
                break
        else:
            unit.print()
            print('в отряде {} не найден'.format(self.__hash__()))
            print()


if __name__ == '__main__':
    print('OUTPUT:')
    squad = Squad()
    squad.add(Knight())
    squad.add(Knight())
    squad.add(Archer())
    swordsman = Swordsman()
    squad.add(swordsman)
    squad.remove(swordsman)
    squad.print()
    squad_big = Squad()
    squad_big.add(Swordsman())
    squad_big.add(Swordsman())
    squad_big.add(squad)
    squad_big.print()
