Facade
-------

Описание:
Предоставляет интерфейс более высокого уровня,
который упрощает использование подсистемы


Когда использовать:
- Предоставить простой интерфейс к сложной системе
- Между клиентами и классами реализациями много зависимостей
- Когда нужно разложить систему на отдельные слои


Участники:
1) Фасад
- знает кому переадресовать запрос
- делегирует запросы внутри подсистемы

2) Классы подсистемы
- реализуют функиональность подсистемы
- выполняют работу, порученную объектом Фасад
- ничего не знают об существовании Фасада


Отношения:
Клиенты посылают запросы фасаду.
Он переадресует из подходящим объектам внутри системы.
Клиенты не имеют прямого доступа к объектам подсистемы


Результаты:
- Изолирует клиентов от компонентов подситемы
- Позволяет ослабить связанность между подсистемой и клиентами
- Фасад не препятствует обращаться к компонентам подсистемы напрямую
pas

# Классы подсистемы
class TC1:
    def a(self):
        print('Class 1 a method')

class TC2:
    def a(self):
        print('Class 2 a method')

class TC3:
    def a(self):
        print('Class 3 a method')

# Фасад
class Facade:
    def __init__(self):
        self.tc1 = TC1()
        self.tc2 = TC2()
        self.tc3 = TC3()

    def operation1(self):
        self.tc1.a()
        self.tc2.a()

    def operation2(self):
        self.tc2.a()
        self.tc3.a()


# Клиент
if __name__ == '__main__':
    facade = Facade()
    facade.operation1()
    facade.operation2()
