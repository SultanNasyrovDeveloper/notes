ИМЕНА:
- имена должны передавать намерение программиста
- имя должно сообщить почему эта переменная существует, что делает,
для чего и как используется. не должно требовать дополнительных комментариев.
- не должны содержать дезинформации
- не использовать малозаметные различия в именах
- использовать удобопроизносимые имена
- использовать имена удобные для поиска
- длина имени переменной должна соответствовать области видимости
- не использовать схем кодирования имен(если это не общепринятая договоренность описанная в документации и понятная всем разработчикам этого проекта, и даже в этом случае это сомнительная идея)
- не использовать одно слово для обозначения разных смыслов
- по возможности больше использовать термины из области программирования
- логичный контекст(то есть название переменной должно логично вписываться в контекст)
- меньше использовать слова которые имеют общий смысл или могут обозначать несколько разных значений.
- имена классов должны быть существительными или их комбинацией.
- имена методов должны быть глаголами или глагольными словосочетаниями

Слова для использования:
source, destination, output, input,

is, get, set, kill, delete, abort, fetch/get, add, insert, append, include,
execute,


ФУНКЦИИ:
- функция должна что то делать или отвечать на запрос, но не одновременно
- тела try/except лучше изолировать в отдельную функцию
- обработка ошибок это одна операция
- функции должны быть максимально компактными
- желательно чтобы функция не превышала 20 строк
- фукнция должна делать 1 операцию, делать ее хорошо и ничего другого
1 операция - действия на 1 уровнем под объявленной функцией
- чтобы определить выполняет ли фукнция более одной операции, нужно попробывать
извлечь из нее другую функцию, которая не является переформулировкой реализации
- если в функии есть секции это означает что она выполняет несколько операций
- в функции должен быть 1 уровень абстрации
- чем меньше аргументов принимает функция тем лучше
- не должна делать никаких побочных действий

Унарные функции(1 аргумент)
- название функции и аргумента должны образовать естественную пару
open(file)
- проверка некого условия
- обработка аргумента
- событие(функция ничего не вернет но изменяет некое состояние системы)

Бинарные функции(2 аргумента):
- следует по возможности преобразовать бинарную функцию в унарную

Тернарные функции(3 аргумента):
- если фукнция должна получить более 2, 3 аргументов весьма вероятно,
 что некоторые из них стоит упаковать в отдельный класс.


 КОММЕНТАРИИ:
 комментарий всегда признак неудачи.
 В идеале код должен расссказать историю не используя комментарии



 Объекты и структуры данных
 --------------------------

 Объекты скрывают свои данные за абстракциями и продоставляют функции для
 работы с ними.
 Стуктуры данных раскрывают свои данные и не имеют осмысленных функций.

 объекты передачи данных(DTO)
 ------------------------


Тетирование
-----------
F.I.R.S.T
Fast - тесты должны выполняться быстро
Independent - каждая тестовая функция должна быть независимой
Repeatable - Повторяться в любой среде
Self-validating - результат должен быть очевидным
Timely - Должны создаваться вовремя


КЛАССЫ
Принцип единой ответственности
- краткое описание класса должно кладываться примерно в 25 слов
не употребляя "но", "если", "или", "и".
- класс или модуль должен иметь только одну причину для изменения.

Связность
- классы должны иметь небольшое количество фттрибутов
- методы класса должны использовать большое количество аттрибутов класса



СИСТЕМА:
---------
