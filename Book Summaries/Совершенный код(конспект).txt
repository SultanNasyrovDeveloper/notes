МЫСЛИ:
-------
- Проектирование ПО итеративный процесс. Это значит, что нужно совершать
действия по улучшению ПО до тех пор пока не будешь доволен результатом или
оно не будет соответствовать выдвинутым требованиям.


Проектирование ПО
==================
Разработка и изобретение схемы преобразования спецификации приложения в
готовое приложение.

Уровни проектирования:
----------------------
- Програмная система
Этому уровню соответствует вся система
- Подсистема/пакеты
Суть проектирования на данном уровне разделить программу на основные подсистемы
Важно ограничить взаимодействие подсистем(правила коммуникации подсистем)
Часто используемые подсистемы:
    бизнес-правила:
    пользовательский интерфейс
    ОРМ
- классы
- данные/методы
Данный уровень заключается в разделении каждого класса на методы
- проектирование методов
Детальное определении функиональности методов


Эвристические(абстрактные) принципы построения ПО:
===================================================

Определение объектов реального мира:
------------------------------------
- объекты и их аттрибуты(Объекты из реального мира)
- действия, которые могут быть выполнены над каждым объектом
- действия, которые объект может выполнить над другим объектом
Два универсальных действия - включение(containment, композиция, агрегация) 4
и наследование
- опеределить интерфейс и реализацию
- открытые и закрытые интерфейсы

Определите согласованные абстракции:
------------------------------------
Благоразумные программисты создают абстракции на уровне интерфейсов ме-
тодов, интерфейсов классов и интерфейсов пакетов (иначе говоря, на уровне
дверной ручки, уровне двери и на уровне дома), что способствует более быстрому
и безопасному программированию.

Инкапсулируйте детали реализации:
---------------------------------

Используйте наследование, если оно упрощает проектирование:
------------------------------------------------------------

Скрывайте секреты:
------------------
Связанные с сокрытием информации секреты относятся к двум общим категориям:
- секреты, которые скрывают сложность, позволяя программистам забыть о ней
при работе над остальными частями программы
- секреты, которые скрывают источники изменений с целью локализации ре-
зультатов возможных изменений

Определите области вероятных изменений:
---------------------------------------
- опеределите элементы, изменение которых кажется вероятным
- отделите элементы, изменение которых кажется вероятным
- изолируйте элементы, изменение которых кажется вероятным
Спроектируйте интерфейсы между классами так, чтобы они не зависели от по-
тенциальных изменений. Спроектируйте интерфейсы так, чтобы изменения
ограничивались только внутренними частями классов. Изменение класса должно
оставаться незаметным для любых других классов. Интерфейс класса должен
защищать его секреты.

Поддерживайте сопряжение слабым:
--------------------------------
Наша цель — создать классы и методы, имеющие немногочисленные,
непосредственные, явные и гибкие отношения с другими классами

Критерии оценки сопряжения:
- объем(число соединений между модулями)
- видимость(свзь между модулями должна быть как можно более заметной)
- гибкость(способность к изменению связи между модулями)

Виды сопряжения:
- простое сопряжение посредством данных параметров. Два модуля со-
пряжены таким способом, если между ними передаются только элементарные
типы данных, причем передаются через списки параметров. Этот вид сопряжения
нормален и приемлем.
- простое сопряжение посредством объекта Модуль сопряжен с объектом
этим способом, если он создает экземпляр данного объекта. С этим видом со-
пряжения также все в порядке.
- сопряжение посредством объекта'параметра Два модуля сопряжены друг
с другом объекто
ему Объект 3. Этот вид сопряжения жестче, чем тот вид, при котором Объект 1
требует от Объекта 2 только примитивных типов данных, потому что Объект 2
должен обладать информацией об Объекте 3.
- семантическое сопряжение Самый коварный тип сопряжения имеет место
тогда, когда один модуль использует не какой#то синтаксический элемент друго-
го модуля, а некоторые семантические знания о внутренней работе этого модуля.
Некоторые примеры такого вида сопряжения описаны ниже.

Стремитесь к максимальной связности:
------------------------------------

Формируйте иерархии:
--------------------
Иерархия это многоуровневая организация


Методики проектирования:
========================
- итерация
Во многих случаях, решив проблему при помощи одного
подхода, вы получите знания, которые позволят решить проблему иным, более
эффективным способом.

- разделяй и властвуй
Разделите
программу на разные области и спроектируйте их по отдельности. Если, работая
над одной из областей, вы попадете в тупик, вспомните про итерацию!

- нисходящий и восходящий подходы к проектированию

- эксперементальное прототипирование:
написание абсолютно минимального объема подлежащего выбрасыванию кода,
нужного для ответа на отдельный вопрос проектирования.

Ключевые моменты
- главным Техническим Императивом Разработки ПО является управление слож-
ностью. Управлять сложностью будет гораздо легче, если при проектировании
вы будете стремиться к простоте.
- есть два общих способа достижения простоты: минимизация объема существен-
ной сложности, с которой приходится иметь дело в любой конкретный момент
времени, и подавление необязательного роста несущественной сложности.
- проектирование — эвристический процесс. Слепое следование какой#либо
единственной методологии подавляет творческое мышление и снижает каче-
ство ваших программ.
- оптимальный процесс проектирования итеративен; чем больше вариантов про-
ектирования вы попробуете, тем удачнее будет ваш окончательный проект.
- одной из самых полезных концепций проектирования является сокрытие
информации. Вопрос «Что мне скрыть?» устраняет много сложных проблем
проектирования.
- много полезной и интересной информации о проектировании можно найти
в других книгах. Описанные в этой главе идеи — лишь вершина айсберга.
