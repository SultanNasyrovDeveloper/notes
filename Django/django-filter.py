#################
# DJANGO FILTER #
#################

# INSTALLATION:
# =============
# install with pip
pip install django-filter
# add to INTSALLED APPS

# FILTERS:
# ========
CharFilter  # used with CharField and TextField
UUIDFilter  # matches uuid values
BooleanFilter  # used with BooleanField and NullBooleanField
ChoiceFilter  # used with Choice(values must be specified inside model)
TypedChoiceFilter
MultipleChoiceFilter
TypedMultipleChoiceFilter
DateFilter
TimeFilter
DateTimeFilter



# FILTERSET:
# ==========
# define filterset class and link it to the model
# filterset has api similiar to the djang form
# filters.py
import django_filters as filters
from models import Product

def model_choice_filter_options(requets):
    # you can filter related fields qs with request
    return related_objects_qs


class ProductFilter(filters.FilterSet):
    # you can define field filters manually
    name = filters.CharFilter(field_name='name' lookup_expr='iexact')
    category = filter.CharFilter(field_name='category__name', lookup_expr='iexact')
    related_objects = filter.ModelChoiceFilter(queryset=model_choice_filter_options)

    @property
    def qs(self):
        # you can filter primary qs according to the request
        parent_qs = super().qs
        request = self.request
        return parent.filter(some_field=self.request.some_field)

    class Meta:
        model = Product
        fields = ('price', 'release_date') # define autogenerated filter fields
        exclude = ('some_field')
        # use exclude when you want to filter all fiedls except some


# VIEW:
# =====
from filters import ProductFilter

def some_view(request):
    filter = ProductFilter(request.GET, queryset=Product.objects.all())
    context['filter'] = filter
    return render(request, 'template.html', context)


# TEMPLATE:
# =========
{% extends "base.html" %}

{% block content %}
    <form action="" method="get">
        {{ filter.form.as_p }}
        <input type="submit" />
    </form>
    {% for obj in filter.qs %}
        {{ obj.name }} - ${{ obj.price }}<br />
    {% endfor %}
{% endblock %}


# FIELDS:
# =======

# field options
# -------------
label  # html label
method  # filterset method name or callable(function) that will hande filtering
# method signature filed_handler(queryset, )
